<?php

namespace WPDiscourse\DiscourseWebhook;

use \WPDiscourse\Utilities\Utilities as DiscourseUtilities;

class DiscourseWebhook {

	protected $options;

	protected $wpdc_topics_posts;

	public function __construct() {
		add_action( 'init', array( $this, 'setup_options' ) );
		add_action( 'rest_api_init', array( $this, 'initialize_comment_route' ) );
	}

	public function setup_options() {
		$this->options                        = DiscourseUtilities::get_options();
		$this->options['wpdc_webhook_secret'] = 'thisisfortesting';
		$this->wpdc_topics_posts              = get_option( 'wpdc_topics_posts' );
	}

	public function initialize_comment_route() {
		// Use the use-discourse-plugin option for now.
		if ( ! empty( $this->options['use-discourse-plugin'] ) && 1 === intval( $this->options['use-discourse-plugin'] ) ) {
			register_rest_route( 'wp-discourse/v1', 'discourse-comment', array(
				array(
					'methods'  => \WP_REST_Server::CREATABLE,
					'callback' => array( $this, 'refresh_discourse_comments' ),
				),
			) );
		}
	}

	public function refresh_discourse_comments( $data ) {
		$data = $this->verify_discourse_request( $data );

		if ( is_wp_error( $data ) ) {

			return null;
		}


		$json        = $data->get_json_params();
		write_log( 'json data', $json );
		$comment_number = $data['post']['post_number'] - 1;
		$topic_id    = $data['post']['topic_id'];

		// Try to find a post that matches the topic.
		$query_args = array(
			'meta_key'       => 'discourse_topic_id',
			'meta_value_num' => $topic_id,
			'posts_per_page' => 1,
		);

		$query = new \WP_Query( $query_args );

		$post_id = $query->posts[0]->ID;

		$backup_comments_number = get_post_meta( $post_id, 'discourse_comments_count', true );

		$synced_comments_count = get_post_meta( $post_id, 'wpdc_synced_comments_count', true );

		// Also check if it's greater than the 'discourse_comment_count', to be sure a number created before
		// the webhooks were enabled on the site isn't being overwritten.
		if ( $comment_number > $synced_comments_count ) {
			update_post_meta( $post_id, 'wpdc_synced_comments_count', $comment_number ); // Todo: do the subtraction here?
		}

		if ( true ) { // Todo: add some sort of condition, there still might not be a good reason to update comments.
			update_post_meta( $post_id, 'wpdc_webhook_enabled', 1 );
			update_post_meta( $post_id, 'wpdc_comments_synced', 0 );
		}
	}

	/**
	 * Verify that the request originated from a Discourse webhook and the the secret keys match.
	 *
	 * @param \WP_REST_Request $data
	 *
	 * @return \WP_Error|\WP_REST_Request
	 */
	protected function verify_discourse_request( $data ) {
		// The X-Discourse-Event-Signature consists of 'sha256=' . hamc of raw payload.
		// It is generated by computing `hash_hmac( 'sha256', $payload, $secret )`
		if ( $sig = substr( $data->get_header( 'X-Discourse-Event-Signature' ), 7 ) ) {
			$payload = $data->get_body();
			// Key used for verifying the request - a matching key needs to be set on the Discourse webhook.
			$secret = ! empty( $this->options['webhook-secret-key'] ) ? $this->options['webhook-secret-key'] : '';

			if ( ! $secret ) {
				return new \WP_Error( 'discourse_webhook_configuration_error', 'The webhook secret key has not been set.' );
			}

			if ( $sig === hash_hmac( 'sha256', $payload, $secret ) ) {

				return $data;
			} else {

				return new \WP_Error( 'discourse_webhook_authentication_error', 'Discourse Webhook Request Error: signatures did not match.' );
			}
		}

		return new \WP_Error( 'discourse_webhook_authentication_error', 'Discourse Webhook Request Error: the X-Discourse-Event-Signature was not set for the request.' );
	}
}